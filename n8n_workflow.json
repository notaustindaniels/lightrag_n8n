{
  "name": "7.1_wiki.gg_crawler.json",
  "nodes": [
    {
      "parameters": {},
      "id": "54444ac6-fc55-4e15-85b2-a41bdcbbcc70",
      "name": "When clicking 'Test workflow'",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1600,
        64
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "wiki-url",
              "name": "wikiUrl",
              "value": "https://afterinc.wiki.gg",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "eb7737e7-9eb8-4f3b-a0f8-8942dc638ffa",
      "name": "Set Wiki URL",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1408,
        64
      ]
    },
    {
      "parameters": {
        "url": "={{ $json.wikiUrl }}/api.php?action=query&list=allpages&aplimit=500&format=json&formatversion=2",
        "options": {
          "timeout": 30000
        }
      },
      "id": "2763c348-e904-4519-abf1-2ac311de0ccf",
      "name": "Fetch Wiki Pages",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1200,
        64
      ]
    },
    {
      "parameters": {
        "functionCode": "// Process MediaWiki API response\nconst apiResponse = $input.item.json;\nconst wikiUrl = $('Set Wiki URL').item.json.wikiUrl;\n\n// Check for valid response\nif (!apiResponse.query || !apiResponse.query.allpages) {\n  throw new Error('Invalid MediaWiki API response');\n}\n\nconst pages = apiResponse.query.allpages;\nconsole.log(`Retrieved ${pages.length} pages from MediaWiki API`);\n\n// Note if there are more pages\nif (apiResponse.continue && apiResponse.continue.apcontinue) {\n  console.log('Note: There are more pages available. This workflow processes only the first 500.');\n  console.log(`To get more pages, use apcontinue=${apiResponse.continue.apcontinue}`);\n}\n\n// Transform pages into items for processing\nconst pageItems = pages.map((page, index) => ({\n  title: page.title,\n  pageid: page.pageid,\n  wikiUrl: wikiUrl,\n  index: index + 1,\n  total: pages.length\n}));\n\nreturn pageItems;"
      },
      "id": "24800ce5-7b3b-4419-b811-371e0cba1196",
      "name": "Parse API Response",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1008,
        64
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "80f8aa00-b04c-4092-8aa8-79af2c71ce69",
      "name": "Process One by One",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -800,
        64
      ]
    },
    {
      "parameters": {
        "url": "={{ $json.wikiUrl }}/api.php?action=parse&page={{ encodeURIComponent($json.title) }}&prop=text&format=json&formatversion=2",
        "options": {
          "timeout": 30000
        }
      },
      "id": "868f2bb5-6191-4975-b157-47a33fd77026",
      "name": "Get Page Content",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -576,
        64
      ],
      "continueOnFail": true
    },
    {
      "parameters": {
        "functionCode": "// Check if we got valid content\nconst pageData = $('Process One by One').item.json;\nconst apiResponse = $input.item.json;\n\n// Handle errors\nif (apiResponse.error) {\n  console.error(`Failed to get content for: ${pageData.title}`);\n  console.error(`Error: ${apiResponse.error.info || apiResponse.error}`);\n  return {\n    error: true,\n    title: pageData.title,\n    message: apiResponse.error.info || 'Failed to get page content'\n  };\n}\n\n// Check for parse data\nif (!apiResponse.parse || !apiResponse.parse.text) {\n  console.error(`No content found for: ${pageData.title}`);\n  return {\n    error: true,\n    title: pageData.title,\n    message: 'No parse data found'\n  };\n}\n\n// Success\nconst htmlContent = apiResponse.parse.text;\nconst pageTitle = apiResponse.parse.title || pageData.title;\n\nconsole.log(`Retrieved content for: ${pageTitle} (${pageData.index}/${pageData.total})`);\n\nreturn {\n  title: pageTitle,\n  html: htmlContent,\n  wikiUrl: pageData.wikiUrl,\n  pageUrl: `${pageData.wikiUrl}/wiki/${encodeURIComponent(pageTitle.replace(/ /g, '_'))}`,\n  index: pageData.index,\n  total: pageData.total,\n  success: true\n};"
      },
      "id": "ee6e89cb-f1ea-4333-915c-de68f4a74282",
      "name": "Check Content",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -400,
        64
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "has-error",
              "leftValue": "={{ $json.error }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "true"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "cc0389e2-13ed-4f60-9772-e9b5e21275a7",
      "name": "Has Error?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -208,
        64
      ]
    },
    {
      "parameters": {
        "html": "={{ $json.html }}",
        "options": {}
      },
      "id": "790a1104-c8df-4727-8a82-219f9d485c48",
      "name": "Convert to Markdown",
      "type": "n8n-nodes-base.markdown",
      "typeVersion": 1,
      "position": [
        0,
        0
      ]
    },
    {
      "parameters": {
        "functionCode": "// Prepare document for LightRAG\nconst pageData = $('Check Content').item.json;\nconst markdown = $input.item.json.markdown || '';\n\n// Generate document ID\nfunction generateDocumentId(title, wikiUrl) {\n  try {\n    const urlObj = new URL(wikiUrl);\n    const domain = urlObj.hostname;\n    return `[${domain}] ${title}`;\n  } catch (error) {\n    return `[After Inc] ${title}`;\n  }\n}\n\nconst documentId = generateDocumentId(pageData.title, pageData.wikiUrl);\n\nconst document = {\n  text: markdown,\n  description: `RebelInc Wiki - ${pageData.title}`,\n  source_url: pageData.pageUrl,\n  sitemap_url: pageData.wikiUrl,\n  doc_index: pageData.index,\n  total_docs: pageData.total,\n  document_id: documentId\n};\n\nconsole.log(`Prepared document ${document.doc_index}/${document.total_docs}: ${pageData.title}`);\n\nreturn document;"
      },
      "id": "97935bc6-daf6-4df1-8996-41f336f6ec76",
      "name": "Prepare Document",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        208,
        0
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://sea-turtle-app-6kjrs.ondigitalocean.app/documents/text/enhanced",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json) }}",
        "options": {}
      },
      "id": "1f54931b-fc74-4c01-b5c0-fac5f51d6a1e",
      "name": "Insert to LightRAG",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        400,
        0
      ],
      "continueOnFail": true
    },
    {
      "parameters": {
        "functionCode": "// Log the error\nconst errorData = $input.item.json;\nconsole.error(`Skipped page: ${errorData.title}`);\nconsole.error(`Reason: ${errorData.message}`);\n\nreturn {\n  skipped: true,\n  title: errorData.title,\n  reason: errorData.message\n};"
      },
      "id": "d97ab1cf-57d3-4e87-bf9b-e44a797ef792",
      "name": "Log Error",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        0,
        128
      ]
    },
    {
      "parameters": {
        "functionCode": "// Check if this is the last item\nconst splitBatchNode = $('Process One by One').context;\nconst isLastItem = !splitBatchNode || splitBatchNode.noItemsLeft;\n\nreturn {\n  ...($input.item.json || {}),\n  isLastItem: isLastItem\n};"
      },
      "id": "648d3e02-96a4-4f7d-945c-bed0fc24dde3",
      "name": "Check If Last",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        608,
        64
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "is-last",
              "leftValue": "={{ $json.isLastItem }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "true"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "ac301bfb-e218-4304-9d52-1ab14c842231",
      "name": "Is Last Item?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        800,
        64
      ]
    },
    {
      "parameters": {
        "functionCode": "// Generate completion message\nconst totalPages = $('Parse API Response').all()[0].json.length;\n\nreturn {\n  status: 'completed',\n  message: `Workflow completed. Processed ${totalPages} pages from RebelInc Wiki.`,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "aca920be-9d80-40d5-847f-4f1ba358529f",
      "name": "Workflow Complete",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1008,
        0
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "When clicking 'Test workflow'": {
      "main": [
        [
          {
            "node": "Set Wiki URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Wiki URL": {
      "main": [
        [
          {
            "node": "Fetch Wiki Pages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Wiki Pages": {
      "main": [
        [
          {
            "node": "Parse API Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse API Response": {
      "main": [
        [
          {
            "node": "Process One by One",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process One by One": {
      "main": [
        [],
        [
          {
            "node": "Get Page Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Page Content": {
      "main": [
        [
          {
            "node": "Check Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Content": {
      "main": [
        [
          {
            "node": "Has Error?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Error?": {
      "main": [
        [
          {
            "node": "Log Error",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Convert to Markdown",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to Markdown": {
      "main": [
        [
          {
            "node": "Prepare Document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Document": {
      "main": [
        [
          {
            "node": "Insert to LightRAG",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert to LightRAG": {
      "main": [
        [
          {
            "node": "Check If Last",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Error": {
      "main": [
        [
          {
            "node": "Check If Last",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check If Last": {
      "main": [
        [
          {
            "node": "Is Last Item?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Last Item?": {
      "main": [
        [
          {
            "node": "Workflow Complete",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Process One by One",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "425e41be-1380-46b8-87c6-94b3deaf271d",
  "meta": {
    "instanceId": "b4a5a34f61263b5bccef2bb1faf90b6e128bf65feaf809251e6e85bf0bdd5d8b"
  },
  "id": "nDSur2cJShxjsfk0",
  "tags": []
}